@inherits LayoutComponentBase

<AuthorizeView>
    <Authorized>
        <MudLayout>
            <MudDrawer Open="true" Variant="DrawerVariant.Mini" Anchor="Anchor.Left" Elevation="1" Class="mud-width-220" ClipMode="DrawerClipMode.Always">
                <MudNavMenu>
                    @foreach (var route in Routes.AllRoutes)
                    {
                        if (!route.Contains("SampleId"))
                        {
                            <MudNavLink Href="@route" Icon="@GetIcon(route)" Match="GetMatch(route)">@GetRouteName(route)</MudNavLink>
                        }
                    }
                </MudNavMenu>
            </MudDrawer>

            <MudAppBar Dense="true" Gutters="false" Class="px-1">
                <a href="@Routes.Dashboard"><MudText Typo="Typo.h4" Style="color: var(--mud-palette-primary-text)">Planity</MudText></a>
                <MudSpacer />
                <LoginDisplay />
            </MudAppBar>

            <MudMainContent>
                @Body
            </MudMainContent>
        </MudLayout>
    </Authorized>

    <NotAuthorized>
        <RedirectToLogin/>
    </NotAuthorized>
</AuthorizeView>

@code {
    private string GetRouteName(string route)
    {
        return route switch
        {
            "/" => "Dashboard",
            "/projects" => "Projektöversikt",
            "projects/new" => "Nytt projekt",
            "/settings" => "Inställningar",
            "/unauthorized" => "Ej behörig",
            "/resources" => "Resursöversikt",
            "/resources/new" => "Ny resurs",
            _ when route.StartsWith("/resources/") => "Resursdetaljer",
            "/tasks" => "Uppgiftsöversikt",
            "/tasks/new" => "Ny uppgift",
            _ when route.StartsWith("/tasks/") => "Uppgiftsdetaljer",
            "/milestones" => "Milestoneöversikt",
            "/milestones/new" => "Ny milestone",
            _ when route.StartsWith("/milestones/") => "Milestonedetaljer",
            _ when route.StartsWith("/projects/") => "Projektdetaljer",
            _ => route
        };
    }
    private string GetIcon(string route)
    {
        return route switch
        {
            "/" => Icons.Material.Filled.Dashboard,
            "/projects" => Icons.Material.Filled.List,
            "projects/new" => Icons.Material.Filled.AddBox,
            "/settings" => Icons.Material.Filled.Settings,
            "/unauthorized" => Icons.Material.Filled.Block,
            "/resources" => Icons.Material.Filled.People,
            "/resources/new" => Icons.Material.Filled.PersonAdd,
            _ when route.StartsWith("/resources/") => Icons.Material.Filled.Person,
            "/tasks" => Icons.Material.Filled.Checklist,
            "/tasks/new" => Icons.Material.Filled.AddTask,
            _ when route.StartsWith("/tasks/") => Icons.Material.Filled.Task,
            "/milestones" => Icons.Material.Filled.Flag,
            "/milestones/new" => Icons.Material.Filled.Add,
            _ when route.StartsWith("/milestones/") => Icons.Material.Filled.FlagCircle,
            _ when route.StartsWith("/projects/") => Icons.Material.Filled.Info,
            _ => Icons.Material.Filled.Link
        };
    }
    private NavLinkMatch GetMatch(string route)
    {
        return route == "/" ? NavLinkMatch.All : NavLinkMatch.Prefix;
    }
}

