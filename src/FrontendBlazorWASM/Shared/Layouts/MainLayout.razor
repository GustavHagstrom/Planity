@inherits LayoutComponentBase

<AuthorizeView>

    <Authorized>

        <MudLayout>

            <style>
                .app-bar{
                    position: fixed;
                    top: 0;
                    left: 0;
                    width: 100%; 
                    z-index: 1000;
                }
            </style>


            <MudToolBar Dense="true" Gutters="false" Class="px-1 mud-elevation-4 app-bar" Style="">
                <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Primary" OnClick="ToggleDrawer" />
                <a href="@Routes.Dashboard"><MudText Typo="Typo.h4" Style="color: var(--mud-palette-primary)"><b>Planity</b></MudText></a>
                <div class="py-2 px-3" style="height: 100%;">
                    <MudDivider Vertical="true" />
                </div>
                
                <MudMenu>
                    <ActivatorContent>
                        <ActiveText Href="/projects" Match="NavLinkMatch.Prefix">Hejk</ActiveText>
                    </ActivatorContent>
                    <ChildContent>
                        @foreach (var route in Routes.AllRoutes)
                        {
                            if (!route.Contains("SampleId"))
                            {
                                <ActiveText Href="@route" Match="GetMatch(route)">
                                    @GetRouteName(route)
                                </ActiveText>
                                @* <MudMenuItem Href="@route" Icon="@GetIcon(route)" Match="GetMatch(route)">@GetRouteName(route)</MudMenuItem> *@
                            }
                        }
                    </ChildContent>
                </MudMenu>
                <MudSpacer />
                <LoginDisplay />
            </MudToolBar>

            <MudDrawer @bind-Open="_drawerOpen" Variant="DrawerVariant.Temporary" Elevation="1" Anchor="Anchor.Left"  >
                <MudNavMenu Style="flex-direction: row;">
                    @foreach (var route in Routes.AllRoutes)
                    {
                        if (!route.Contains("SampleId"))
                        {
                            <MudNavLink Href="@route" Icon="@GetIcon(route)" Match="GetMatch(route)">@GetRouteName(route)</MudNavLink>
                        }
                    }
                </MudNavMenu>
            </MudDrawer>

            <div style="padding-top: 48px;">
                @Body
            </div>
        </MudLayout>

    </Authorized>



    <NotAuthorized>
        <RedirectToLogin/>
    </NotAuthorized>
</AuthorizeView>

@code {
    private string GetRouteName(string route)
    {
        return route switch
        {
            "/" => "Dashboard",
            "/projects" => "Projektöversikt",
            "projects/new" => "Nytt projekt",
            "/settings" => "Inställningar",
            "/unauthorized" => "Ej behörig",
            "/resources" => "Resursöversikt",
            "/resources/new" => "Ny resurs",
            _ when route.StartsWith("/resources/") => "Resursdetaljer",
            "/tasks" => "Uppgiftsöversikt",
            "/tasks/new" => "Ny uppgift",
            _ when route.StartsWith("/tasks/") => "Uppgiftsdetaljer",
            "/milestones" => "Milestoneöversikt",
            "/milestones/new" => "Ny milestone",
            _ when route.StartsWith("/milestones/") => "Milestonedetaljer",
            _ when route.StartsWith("/projects/") => "Projektdetaljer",
            _ => route
        };
    }
    private string GetIcon(string route)
    {
        return route switch
        {
            "/" => Icons.Material.Filled.Dashboard,
            "/projects" => Icons.Material.Filled.List,
            "projects/new" => Icons.Material.Filled.AddBox,
            "/settings" => Icons.Material.Filled.Settings,
            "/unauthorized" => Icons.Material.Filled.Block,
            "/resources" => Icons.Material.Filled.People,
            "/resources/new" => Icons.Material.Filled.PersonAdd,
            _ when route.StartsWith("/resources/") => Icons.Material.Filled.Person,
            "/tasks" => Icons.Material.Filled.Checklist,
            "/tasks/new" => Icons.Material.Filled.AddTask,
            _ when route.StartsWith("/tasks/") => Icons.Material.Filled.Task,
            "/milestones" => Icons.Material.Filled.Flag,
            "/milestones/new" => Icons.Material.Filled.Add,
            _ when route.StartsWith("/milestones/") => Icons.Material.Filled.FlagCircle,
            _ when route.StartsWith("/projects/") => Icons.Material.Filled.Info,
            _ => Icons.Material.Filled.Link
        };
    }
    private NavLinkMatch GetMatch(string route)
    {
        return route == "/" ? NavLinkMatch.All : NavLinkMatch.Prefix;
    }
}

@code{
        bool _drawerOpen = false;
    void ToggleDrawer()
    {
        _drawerOpen = !_drawerOpen;
    }

}