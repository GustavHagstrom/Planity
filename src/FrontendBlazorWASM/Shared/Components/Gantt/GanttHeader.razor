@using System.Globalization
@using Planity.FrontendBlazorWASM.Shared.Components.Gantt
@inject IStringLocalizer<GanttHeader> Localizer

<svg style="height: @View.HeaderHeightPx; width: @View.SvgWidthPx;">
    @foreach (var segment in GetHeaderSegments())
    {
        @segment
    }
    @GanttSvgHelper.RenderLine(0, View.SvgWidth, View.HeaderHeight / 2, View.HeaderHeight / 2, "black", 1)
    @GanttSvgHelper.RenderLine(0, View.SvgWidth, View.HeaderHeight, View.HeaderHeight, "black", 1, 1)
</svg>

@code {
    [CascadingParameter] public GanttView View { get; set; } = null!;

    protected override void OnParametersSet()
    {
        if (View is null)
        {
            throw new InvalidOperationException("GanttView cascading parameter must not be null.");
        }
    }

    int DaysToNextYear(DateTime date)
    {
        var nextYear = new DateTime(date.Year + 1, 1, 1);
        return (nextYear - date).Days;
    }

    IEnumerable<MarkupString> GetHeaderSegments()
    {
        if (View.Mode == GanttViewMode.Year)
        {
            foreach (var s in GetYearSegments()) yield return s;
            foreach (var s in GetMonthSegments(false)) yield return s;
        }
        else if (View.Mode == GanttViewMode.Month)
        {
            foreach (var s in GetMonthSegments(true)) yield return s;
            foreach (var s in GetWeekSegments()) yield return s;
        }
        else // Week
        {
            foreach (var s in GetWeekSegments(true)) yield return s;
            foreach (var s in GetDaySegments()) yield return s;
        }
    }

    IEnumerable<MarkupString> GetYearSegments()
    {
        var currentDate = View.Start;
        while (currentDate < View.End)
        {
            var daysToNextYear = DaysToNextYear(currentDate);
            var daysToEnd = (View.End - currentDate).Days;
            var daysToRender = Math.Min(daysToNextYear, daysToEnd);
            var width = daysToRender * View.PixelsPerDay;
            var height = View.HeaderHeight / 2;
            
            var startX = (currentDate - View.Start).TotalDays * View.PixelsPerDay;

            var textX = startX + (daysToRender * View.PixelsPerDay / 2);
            var year = currentDate.ToString("yyyy", CultureInfo.InvariantCulture);
            yield return GanttSvgHelper.RenderRect(startX, 0, width, height, "pink");
            yield return GanttSvgHelper.RenderLine(startX, startX, 0, height, "black", 0.2);
            yield return GanttSvgHelper.RenderText(textX, 18, year);
            currentDate = currentDate.AddDays(daysToRender);
        }
    }

    IEnumerable<MarkupString> GetMonthSegments(bool onTop = false)
    {
        var currentDate = View.Start;
        while (currentDate < View.End)
        {
            var startX = (currentDate - View.Start).TotalDays * View.PixelsPerDay;
            var monthDays = DateTime.DaysInMonth(currentDate.Year, currentDate.Month);
            var daysToNextMonth = monthDays - (currentDate.Day - 1);
            var width = daysToNextMonth * View.PixelsPerDay;
            var height = View.HeaderHeight / 2;
            var monthText = currentDate.ToString(onTop ? "MMMM" : "MMM", CultureInfo.InvariantCulture);
            var y = onTop ? 0 : height;
            var textY = onTop ? 18 : height + 18;
            var textX = startX + (width / 2);
            var fillColor = onTop ? "goldenrod" : "lightblue";
            yield return GanttSvgHelper.RenderRect(startX, y, width, height, fillColor);
            yield return GanttSvgHelper.RenderLine(startX, startX, y, y + height, "black", 0.2);
            yield return GanttSvgHelper.RenderText(textX, textY, monthText);
            currentDate = currentDate.AddDays(daysToNextMonth);
        }
    }

    IEnumerable<MarkupString> GetWeekSegments(bool onTop = false)
    {
        var currentDate = View.Start;
        while (currentDate < View.End)
        {
            var startX = (currentDate - View.Start).TotalDays * View.PixelsPerDay;
            var weekNumber = CultureInfo.InvariantCulture.Calendar.GetWeekOfYear(currentDate, CalendarWeekRule.FirstFourDayWeek, DayOfWeek.Monday);
            var daysToNextWeek = 7 - (int)currentDate.DayOfWeek;
            var width = daysToNextWeek * View.PixelsPerDay;
            var height = View.HeaderHeight / 2;
            var weekText = onTop ? $"{Localizer["Vecka"]}: {weekNumber}" : Localizer["v."] + $" {weekNumber}";
            var y = onTop ? 0 : height;
            var textY = onTop ? 18 : height + 18;
            var fill = onTop ? "lightgreen" : "lightblue";
            yield return GanttSvgHelper.RenderRect(startX, y, width, height, fill);
            yield return GanttSvgHelper.RenderLine(startX, startX, y, y + height, "black", 0.2);
            yield return GanttSvgHelper.RenderText(startX + (width / 2), textY, weekText);
            currentDate = currentDate.AddDays(daysToNextWeek);
        }
    }

    IEnumerable<MarkupString> GetDaySegments()
    {
        var currentDate = View.Start;
        while (currentDate < View.End)
        {
            var startX = (currentDate - View.Start).TotalDays * View.PixelsPerDay;
            var dayText = currentDate.ToString("ddd d");
            var textX = startX + (View.PixelsPerDay / 2);
            yield return GanttSvgHelper.RenderRect(startX, View.HeaderHeight / 2, View.PixelsPerDay, View.HeaderHeight / 2, "lightblue");
            yield return GanttSvgHelper.RenderLine(startX, startX, View.HeaderHeight / 2, View.HeaderHeight, "black", 0.2);
            yield return GanttSvgHelper.RenderText(textX, View.HeaderHeight / 2 + 18, dayText);
            currentDate = currentDate.AddDays(1);
        }
    }
}
