@using System.Globalization
@using Planity.FrontendBlazorWASM.Shared.Components.Gantt
@inject IStringLocalizer<GanttHeader> Localizer

<svg style="height: @HeaderHeightPx; width: @SvgWidthPx;">
    @foreach (var segment in GetHeaderSegments())
    {
        @segment
    }
    @GanttSvgHelper.RenderLine(0, SvgWidthPxNum, HeaderHeight / 2, HeaderHeight / 2, "black", 1)
    @GanttSvgHelper.RenderLine(0, SvgWidthPxNum, HeaderHeight, HeaderHeight, "black", 1)
</svg>

@code {
    [Parameter] public DateTime Start { get; set; }
    [Parameter] public DateTime End { get; set; }
    [Parameter] public GanttViewMode Mode { get; set; } = GanttViewMode.Month;
    [Parameter] public double PixelsPerDay { get; set; } = 30;
    [Parameter] public double HeaderHeight { get; set; } = 50;
    [Parameter] public string HeaderHeightPx { get; set; } = "50px";
    [Parameter] public string SvgWidthPx { get; set; } = "600px";
    private double SvgWidthPxNum => double.TryParse(SvgWidthPx.Replace("px", ""), out var val) ? val : 600;
    int DaysToNextYear(DateTime date)
    {
        var nextYear = new DateTime(date.Year + 1, 1, 1);
        return (nextYear - date).Days;
    }

    IEnumerable<MarkupString> GetHeaderSegments()
    {
        if (Mode == GanttViewMode.Year)
        {
            foreach (var s in GetYearSegments()) yield return s;
            foreach (var s in GetMonthSegments(true)) yield return s;
        }
        else if (Mode == GanttViewMode.Month)
        {
            foreach (var s in GetMonthSegments(false)) yield return s;
            foreach (var s in GetWeekSegments()) yield return s;
        }
        else // Week
        {
            foreach (var s in GetWeekSegments(true)) yield return s;
            foreach (var s in GetDaySegments()) yield return s;
        }
    }

    IEnumerable<MarkupString> GetYearSegments()
    {
        var currentDate = Start;
        while (currentDate < End)
        {
            var daysToNextYear = DaysToNextYear(currentDate);
            var daysToEnd = (End - currentDate).Days;
            var daysToRender = Math.Min(daysToNextYear, daysToEnd);
            var startX = (currentDate - Start).TotalDays * PixelsPerDay;
            var textX = startX + (daysToRender * PixelsPerDay / 2);
            var year = currentDate.ToString("yyyy", CultureInfo.InvariantCulture);
            yield return GanttSvgHelper.RenderRect(startX, 0, daysToRender * PixelsPerDay, HeaderHeight / 2, "pink");
            yield return GanttSvgHelper.RenderLine(startX, startX, 0, HeaderHeight / 2, "black", 0.5);
            yield return GanttSvgHelper.RenderText(textX, 18, year);
            currentDate = currentDate.AddDays(daysToRender);
        }
    }

    IEnumerable<MarkupString> GetMonthSegments(bool shortName)
    {
        var currentDate = Start;
        while (currentDate < End)
        {
            var startX = (currentDate - Start).TotalDays * PixelsPerDay;
            var monthDays = DateTime.DaysInMonth(currentDate.Year, currentDate.Month);
            var daysToNextMonth = monthDays - (currentDate.Day - 1);
            var monthWidth = daysToNextMonth * PixelsPerDay;
            var monthName = currentDate.ToString(shortName ? "MMM" : "MMMM", CultureInfo.InvariantCulture);
            var textX = startX + (monthWidth / 2);
            yield return GanttSvgHelper.RenderRect(startX, HeaderHeight / 2, monthWidth, HeaderHeight / 2, "lightblue");
            yield return GanttSvgHelper.RenderLine(startX, startX, HeaderHeight / 2, HeaderHeight, "black", 0.5);
            yield return GanttSvgHelper.RenderText(textX, HeaderHeight / 2 + 18, monthName);
            currentDate = currentDate.AddDays(daysToNextMonth);
        }
    }

    IEnumerable<MarkupString> GetWeekSegments(bool onlyTop = false)
    {
        var currentDate = Start;
        while (currentDate < End)
        {
            var startX = (currentDate - Start).TotalDays * PixelsPerDay;
            var weekNumber = CultureInfo.InvariantCulture.Calendar.GetWeekOfYear(currentDate, CalendarWeekRule.FirstFourDayWeek, DayOfWeek.Monday);
            var daysToNextWeek = 7 - (int)currentDate.DayOfWeek;
            var weekWidth = daysToNextWeek * PixelsPerDay;
            var weekText = onlyTop ? $"{Localizer["Vecka"]}: {weekNumber}" : Localizer["v."] + $" {weekNumber}";
            var y = onlyTop ? 0 : HeaderHeight / 2;
            var textY = onlyTop ? 18 : HeaderHeight / 2 + 18;
            var fill = onlyTop ? "lightgreen" : "lightblue";
            yield return GanttSvgHelper.RenderRect(startX, y, weekWidth, HeaderHeight / 2, fill);
            yield return GanttSvgHelper.RenderLine(startX, startX, y, y + HeaderHeight / 2, "black", 0.5);
            yield return GanttSvgHelper.RenderText(startX + (weekWidth / 2), textY, weekText);
            currentDate = currentDate.AddDays(daysToNextWeek);
        }
    }

    IEnumerable<MarkupString> GetDaySegments()
    {
        var currentDate = Start;
        while (currentDate < End)
        {
            var startX = (currentDate - Start).TotalDays * PixelsPerDay;
            var dayText = currentDate.ToString("ddd");
            var textX = startX + (PixelsPerDay / 2);
            yield return GanttSvgHelper.RenderRect(startX, HeaderHeight / 2, PixelsPerDay, HeaderHeight / 2, "lightblue");
            yield return GanttSvgHelper.RenderLine(startX, startX, HeaderHeight / 2, HeaderHeight, "black", 0.5);
            yield return GanttSvgHelper.RenderText(textX, HeaderHeight / 2 + 18, dayText);
            currentDate = currentDate.AddDays(1);
        }
    }
}
