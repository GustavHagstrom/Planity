@using System.Globalization
@inject IStringLocalizer<GanttHeader> Localizer

<svg style="height: @HeaderHeightPx; width: @SvgWidthPx;">
    <line x1="0" x2="@SvgWidthPx" y1="@(HeaderHeight / 2)" y2="@(HeaderHeight / 2)" stroke="black" stroke-width="1" />
    <line x1="0" x2="@SvgWidthPx" y1="@HeaderHeight" y2="@HeaderHeight" stroke="black" stroke-width="1" />
    @if(Mode == GanttViewMode.Year)
    {
        var currentDate = Start;
        while (currentDate < End)
        {
            var daysToNextYear = DaysToNextYear(currentDate);
            var daysToEnd = (End - currentDate).Days;
            var daysToRender = Math.Min(daysToNextYear, daysToEnd);
            var startX = (currentDate - Start).TotalDays * PixelsPerDay;
            var textX = startX + (daysToRender * PixelsPerDay / 2);
            var year = currentDate.ToString("yyyy", CultureInfo.InvariantCulture);
            <rect x="@startX" y="0" width="@(daysToRender* PixelsPerDay)" height="@(HeaderHeight / 2)" fill="pink" />
            <line x1="@(startX)" x2="@startX" y1="0" y2="@(HeaderHeight / 2)" stroke="black" stroke-width="0.5"/>
            @((MarkupString)$"""<text x="{textX.ToString(CultureInfo.InvariantCulture)}" y="15" font-size="12" text-anchor="middle">{year}</text>""")
            currentDate = currentDate.AddDays(daysToRender);
        }
    }
    else if (Mode == GanttViewMode.Month)
    {
        var currentDate = Start;
        while (currentDate < End)
        {
            var startX = (currentDate - Start).TotalDays * PixelsPerDay;
            var monthName = currentDate.ToString("MMMM", CultureInfo.InvariantCulture);
            <rect x="@startX" y="0" width="@(PixelsPerDay * DateTime.DaysInMonth(currentDate.Year, currentDate.Month))" height="@($"{HeaderHeight / 2}px")" fill="lightblue" />
            <line x1="@(startX)" x2="@startX" y1="0" y2="@(HeaderHeight / 2)" stroke="black" stroke-width="0.5" />
            @((MarkupString)$"""<text x="{startX + PixelsPerDay * DateTime.DaysInMonth(currentDate.Year, currentDate.Month) / 2}" y="15" font-size="12" text-anchor="middle">{monthName}</text>""")
            currentDate = currentDate.AddMonths(1);
        }
    }
    else
    {
        var currentDate = Start;
        while (currentDate < End)
        {
            var startX = (currentDate - Start).TotalDays * PixelsPerDay;
            var weekNumber = CultureInfo.InvariantCulture.Calendar.GetWeekOfYear(currentDate, CalendarWeekRule.FirstFourDayWeek, DayOfWeek.Monday);
            <rect x="@startX" y="0" width="@(7 * PixelsPerDay)" height="@($"{HeaderHeight / 2}px")" fill="lightgreen" />
            <line x1="@(startX)" x2="@startX" y1="0" y2="@(HeaderHeight / 2)" stroke="black" stroke-width="0.5" />
            @((MarkupString)$"""<text x="{startX + 3.5 * PixelsPerDay}" y="15" font-size="12" text-anchor="middle">{Localizer["Vecka"]}: {weekNumber}</text>""")
            currentDate = currentDate.AddDays(7);
        }
    }
</svg>

@code {
    [Parameter] public DateTime Start { get; set; }
    [Parameter] public DateTime End { get; set; }
    [Parameter] public GanttViewMode Mode { get; set; } = GanttViewMode.Month;
    [Parameter] public double PixelsPerDay { get; set; } = 30;
    [Parameter] public double HeaderHeight { get; set; } = 50;
    [Parameter] public string HeaderHeightPx { get; set; } = "50px";
    [Parameter] public string SvgWidthPx { get; set; } = "600px";
    int DaysToNextYear(DateTime date)
    {
        var nextYear = new DateTime(date.Year + 1, 1, 1);
        return (nextYear - date).Days;
    }
}
