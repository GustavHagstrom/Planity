@using System.Globalization
@using Planity.FrontendBlazorWASM.Shared.Components.Gantt
@inject IDateCalculator GanttDateCalculator

@if (IsDragging && DragSourceItem != null && DragSourceType != null)
{
    string startX = "0";
    string startY = "0";
    if (DragSourceItem.Type == GanttItemType.Milestone && DragSourceItem.Start != null)
    {
        var index = GanttItemUtils.ItemsWithExpandLevel(View.Items).Select((tuple, idx) => (tuple, idx)).FirstOrDefault(t => t.tuple.item == DragSourceItem).idx;
        var centerX = ((DragSourceItem.Start.Value - View.Start).TotalDays * View.PixelsPerDay) + (View.RowHeight / 2);
        var centerY = (index * View.RowHeight) + (View.RowHeight / 2);
        startX = centerX.ToString(CultureInfo.InvariantCulture);
        startY = centerY.ToString(CultureInfo.InvariantCulture);
    }
    else if (DragSourceItem.Start != null)
    {
        var index = GanttItemUtils.ItemsWithExpandLevel(View.Items).Select((tuple, idx) => (tuple, idx)).FirstOrDefault(t => t.tuple.item == DragSourceItem).idx;
        var resources = View.Resources;
        var endDate = GanttDateCalculator.CalculateEnd(DragSourceItem, resources);
        if (endDate != null)
        {
            var x = ((DragSourceItem.Start.Value - View.Start).TotalDays * View.PixelsPerDay);
            var width = ((endDate.Value - DragSourceItem.Start.Value).TotalDays * View.PixelsPerDay);
            var handleRadius = 5;
            var y = (index * View.RowHeight);
            var cy = (y + View.RowHeight / 2).ToString(CultureInfo.InvariantCulture);
            if (DragSourceType == GanttHandleType.Start)
            {
                startX = (x + handleRadius).ToString(CultureInfo.InvariantCulture);
                startY = cy;
            }
            else if (DragSourceType == GanttHandleType.End)
            {
                startX = (x + width - handleRadius).ToString(CultureInfo.InvariantCulture);
                startY = cy;
            }
        }
    }
    var points = $"{startX},{startY} {PointerX},{startY} {PointerX},{PointerY}";
    <polyline points="@points" class="gantt-drag-overlay" marker-end="url(#arrowhead-gold)" />
}

@code {
    [Parameter] public bool IsDragging { get; set; }
    [Parameter] public IGanttItem? DragSourceItem { get; set; }
    [Parameter] public GanttHandleType? DragSourceType { get; set; }
    [Parameter] public string PointerX { get; set; } = "0";
    [Parameter] public string PointerY { get; set; } = "0";
    [Parameter] public GanttView View { get; set; } = null!;
}
