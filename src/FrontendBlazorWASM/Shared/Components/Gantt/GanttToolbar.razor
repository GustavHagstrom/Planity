@inject IStringLocalizer<GanttToolbar> Localizer

<PlanityToolbar Title="@Title">
    <LeftActions>
        <MudSelect InputClass="denser-input" Value="DragMode" ValueChanged="DragModeChanged" Variant="Variant.Outlined" Margin="Margin.Dense" Dense="true" T="GanttDragMode" MultiSelection="false" Class="denser-input" RelativeWidth="DropdownWidth.Relative" Style="width: 170px;" ToStringFunc="ToStringFunc">
            <MudSelectItem Value="GanttDragMode.None" />
            <MudSelectItem Value="GanttDragMode.EditDate" />
            <MudSelectItem Value="GanttDragMode.Link" />
        </MudSelect>

        <div class="date-picker">
            <MudDateRangePicker DateRange="dateRange" DateRangeChanged="DateRangeChanged" Variant="Variant.Outlined" Margin="Margin.Dense" Class="denser-input" RelativeWidth="DropdownWidth.Adaptive" />
        </div>
    </LeftActions>
    <RightActions>
        <MudSwitch T="bool" @bind-Value="autoSave" Label="@Localizer["Autospar:"]" Color="Color.Primary" LabelPlacement="Placement.Left" />
        <MudIconButton Icon="@Icons.Material.Filled.Save" Color="Color.Primary" Disabled="autoSave" Size="Size.Medium" />
    </RightActions>  
</PlanityToolbar>

@code {
    [Parameter] public GanttDragMode DragMode { get; set; }
    [Parameter] public EventCallback<GanttDragMode> DragModeChanged { get; set; }
    [Parameter] public string? Title { get; set; }
    [Parameter] public DateTime Start { get; set; }
    [Parameter] public EventCallback<DateTime> StartChanged { get; set; }
    [Parameter] public DateTime End { get; set; }
    [Parameter] public EventCallback<DateRange> DateRangeChanged { get; set; }
    [Parameter] public EventCallback<DateTime> EndChanged { get; set; }

    DateRange dateRange => new(Start, End);

    bool autoSave = true;

    string ToStringFunc(GanttDragMode mode) 
    {
        string baseString = Localizer["Dragläge:"];
        string modeString = mode switch
        {
            GanttDragMode.None => Localizer["Inget"],
            GanttDragMode.EditDate => Localizer["Flytta"],
            GanttDragMode.Link => Localizer["Länka"],
            _ => mode.ToString()
        };
        return $"{baseString} {modeString}";
    }

    async Task OnDateRangeChanged(DateRange range)
    {
        if(Start != range.Start)
        {
            Start = range.Start ?? Start;
            await StartChanged.InvokeAsync(Start);
        }
        if(End != range.End)
        {
            End = range.End ?? End;
            await EndChanged.InvokeAsync(End);
        }
    }

}
