@using System.Collections.Generic
@using System


<svg style="width: @View.SvgWidthPx; height: 100%; position: absolute; top: 0; left: 0; pointer-events: none;">
    @* Horisontella svarta linjer mellan varje rad *@
    @for (var i = 1; i <= View.RowCount; i++)
    {
        var y = i * View.RowHeight;
        var fill = "black";
        var opacity = 1;
        var strokeWidth = 1;
        @GanttSvgHelper.RenderLine(0, View.SvgWidth, y, y, fill, strokeWidth, opacity)
        

    }

    @* Vertikala linjer med bakgrundsfärg (vit) *@
    @foreach (var x in GetGridLineXs())
    {
        var fill = "black";
        var opacity = 0.2;
        var strokeWidth = 1;
        @GanttSvgHelper.RenderLine(x, x, 0, View.RowHeight * View.RowCount, fill, strokeWidth, opacity)
    }
    
</svg>

@code {
    [CascadingParameter] public GanttView View { get; set; } = null!;

    protected override void OnParametersSet()
    {
        if (View is null)
        {
            throw new InvalidOperationException("GanttView cascading parameter must not be null.");
        }
    }

    private IEnumerable<double> GetGridLineXs()
    {
        if (View.Mode == GanttViewMode.Year)
        {
            var currentDate = View.Start;
            var nextLineX = 0.0;
            while (currentDate < View.End)
            {
                var monthDays = DateTime.DaysInMonth(currentDate.Year, currentDate.Month);
                var daysToNextMounth = monthDays - (currentDate.Day - 1);
                nextLineX += daysToNextMounth * View.PixelsPerDay;
                yield return nextLineX;
                currentDate = currentDate.AddDays(daysToNextMounth);
            }
            
        }
        else
        {
            for (double x = View.PixelsPerDay; x < View.SvgWidth; x += View.PixelsPerDay)
            {
                yield return x;
            }
        }
    }
}
