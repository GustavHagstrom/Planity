@using System.Collections.Generic
@using System

@if (View.Items is not null)
{
    <style>
        .bottom-border {
            box-sizing: border-box;
            border-bottom: 1px solid Black;
        }
        .gantt-row {
            width: 100%;
            position: relative;
            cursor: pointer;
            transition: box-shadow 0.2s, border 0.2s;
            display: flex;
            align-items: center;
        }
        .gantt-row.selected {
            background-color: transparent;
            box-shadow: 0 0 8px 2px #3a6ea5;
            font-weight: bold;
        }
        .gantt-row.child {
            padding-left: 24px;
            border-left: 2px solid #3a6ea5;
            background: rgba(58, 110, 165, 0.05);
        }
        .toggle-btn {
            background: none;
            border: none;
            cursor: pointer;
            margin-right: 4px;
            font-size: 16px;
            width: 20px;
            height: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
        }
    </style>
    <div style="border-right: 1px solid Black; padding-bottom: 10px;">
        <div style="width: @View.LeftWidthPx; height: @View.HeaderHeightPx;" class="bottom-border"></div>
        <div style="width: @View.LeftWidthPx; position: relative;">
            @foreach (var item in View.Items ?? Enumerable.Empty<IGanttItem>())
            {
                <GanttLeftPanelRow Item="item" Level="0" RowHeightPx="@View.RowHeightPx" SelectedItem="View.SelectedItem" OnRowClick="EventCallback.Factory.Create<IGanttItem>(this, OnRowClick)" OnExpandCollapse="View.TriggerStateHasChanged" />
            }
        </div>
    </div>
}


@code {
    [CascadingParameter] public GanttView View { get; set; } = null!;

    protected override void OnParametersSet()
    {
        if (View is null)
        {
            throw new InvalidOperationException("GanttView cascading parameter must not be null.");
        }
    }

    private async Task OnRowClick(IGanttItem item)
    {
        if (View.SelectedItem != item)
        {
            await View.SelectItemAsync(item);
        }
    }
}
