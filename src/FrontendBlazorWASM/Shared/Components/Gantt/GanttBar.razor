@using System.Globalization
@using Planity.FrontendBlazorWASM.Shared.Components.Gantt
@inject IDateCalculator DateCalculator
@inject IRenderCalculator RenderCalculator

<g class="gantt-bar">
    @if(Item.Type == GanttItemType.Milestone && Item.Start != null)
    {
        var milestone = RenderCalculator.CalculateMilestone(Item, View.Start, View.PixelsPerDay, View.RowHeight, Index);
        if (milestone != null)
        {
            var msValue = milestone.Value;
            @if (DragMode == GanttDragMode.EditDate)
            {
                <polygon points="@msValue.ShapePoints" fill="@(HasBrokenDependency ? "red" : FillColor)" opacity="@Opacity" stroke="black" stroke-width="1" filter="url(#glow)"
                    @onpointerdown="BarPointerDownInternal"
                    style="cursor:move" />
            }
            else
            {
                <polygon points="@msValue.ShapePoints" fill="@(HasBrokenDependency ? "red" : FillColor)" opacity="@Opacity" stroke="black" stroke-width="1" />
            }
            @if (DragMode == GanttDragMode.Link)
            {
                <circle cx="@msValue.Center.X" cy="@msValue.Center.Y" r="@HandleRadius" class="gantt-link-handle"
                        @onpointerdown="(e) => OnHandlePointerDown.InvokeAsync((Item, GanttHandleType.Milestone, e))"
                        @onpointerup="(e) => OnHandlePointerUp.InvokeAsync((Item, GanttHandleType.Milestone, e))" />
            }
        }
    }
    else if(Item.Start != null)
    {
        var bar = RenderCalculator.CalculateBar(Item, View.Resources, View.Start, View.PixelsPerDay, View.RowHeight, Index);

        if (bar != null)
        {
            var barValue = bar.Value;
            @if (DragMode == GanttDragMode.EditDate && Item.Type == GanttItemType.Task)
            {
                <rect x="@barValue.Start.X" y="@barValue.Start.Y" width="@barValue.Width" height="@barValue.Height" fill="@(HasBrokenDependency ? "red" : FillColor)" opacity="@Opacity" style="cursor:move" rx="0" ry="0" stroke="black" stroke-width="1" filter="url(#glow)" @onpointerdown="BarPointerDownInternal" />
            }
            else
            {
                <rect x="@barValue.Start.X" y="@barValue.Start.Y" width="@barValue.Width" height="@barValue.Height" fill="@(HasBrokenDependency ? "red" : FillColor)" opacity="@Opacity" style="cursor:default" rx="1" ry="1" stroke="black" stroke-width="1" />
            }
            @if (DragMode == GanttDragMode.Link)
            {
                <circle cx="@barValue.StartHandle.X" cy="@barValue.StartHandle.Y" r="@HandleRadius" class="gantt-link-handle"
                        @onpointerdown="(e) => OnHandlePointerDown.InvokeAsync((Item, GanttHandleType.Start, e))"
                        @onpointerup="(e) => OnHandlePointerUp.InvokeAsync((Item, GanttHandleType.Start, e))" />
                <circle cx="@barValue.EndHandle.X" cy="@barValue.EndHandle.Y" r="@HandleRadius" class="gantt-link-handle"
                        @onpointerdown="(e) => OnHandlePointerDown.InvokeAsync((Item, GanttHandleType.End, e))"
                        @onpointerup="(e) => OnHandlePointerUp.InvokeAsync((Item, GanttHandleType.End, e))" />
            }
        }
    }
</g>

@code {
    [CascadingParameter] public GanttView View { get; set; } = null!;
    [Parameter] public IGanttItem Item { get; set; } = null!;
    [Parameter] public int Index { get; set; }
    [Parameter] public EventCallback<(IGanttItem, GanttHandleType, PointerEventArgs)> OnHandlePointerDown { get; set; }
    [Parameter] public EventCallback<(IGanttItem, GanttHandleType, PointerEventArgs)> OnHandlePointerUp { get; set; }
    string FillColor => Item.Type == GanttItemType.Project ? "plum" : "lightblue";
    double Opacity { get; set; } = 1.0;
    int HandleRadius { get; set; } = 5;
    [Parameter] public GanttDragMode DragMode { get; set; } = GanttDragMode.EditDate;
    [Parameter] public EventCallback<(IGanttItem, PointerEventArgs)> OnBarPointerDown { get; set; }

    private Task BarPointerDownInternal(PointerEventArgs e)
    {
        return OnBarPointerDown.InvokeAsync((Item, e));
    }

    private bool HasBrokenDependency
    {
        get
        {
            if (View?.Links == null || !Item.Start.HasValue)
                return false;

            var predecessors = View.Links.Where(l => l.To == Item).Select(l => l.From);
            foreach (var predecessor in predecessors)
            {
                DateTime? predecessorEnd = null;
                if (predecessor is ProjectTask predTask)
                {
                    predecessorEnd = predTask.Start.HasValue ? DateCalculator.CalculateEnd(predTask, View.Resources) : null;
                }
                else if (predecessor is Milestone milestone)
                {
                    predecessorEnd = milestone.Start;
                }
                if (predecessorEnd.HasValue && Item.Start.Value < predecessorEnd.Value)
                    return true;
            }
            return false;
        }
    }
}
