@using System.Collections.Generic
@using System
@using System.Globalization
@using Planity.FrontendBlazorWASM.Shared.Services
@using Planity.FrontendBlazorWASM.Shared.Components.Gantt

@inject IGanttDateCalculator GanttDateCalculator
@inject IResourceService ResourceService

<svg class="gantt-chart@(IsActive ? " grabbing" : "")" style="width: @View.SvgWidthPx ; height: 100%; position: absolute; top: 0; left: 0;"
     @onpointermove="OnPointerMove" @onpointerup="@(e => OnPointerUp(e))">
    <defs>
        <filter id="glow" x="-30%" y="-30%" width="160%" height="160%">
            <feDropShadow dx="0" dy="0" stdDeviation="0" flood-color="blue" flood-opacity="1.0" />
            <feDropShadow dx="0" dy="0" stdDeviation="1" flood-color="blue" flood-opacity="1.0" />
        </filter>
        <marker id="arrowhead" markerWidth="10" markerHeight="7" refX="10" refY="3.5" orient="auto" markerUnits="strokeWidth">
            <polygon points="0 0, 10 3.5, 0 7" fill="#3a6ea5" />
        </marker>
        <marker id="arrowhead-gold" markerWidth="10" markerHeight="7" refX="10" refY="3.5" orient="auto" markerUnits="strokeWidth">
            <polygon points="0 0, 10 3.5, 0 7" fill="gold" />
        </marker>
    </defs>
    @foreach (var ((item, level), index) in GanttItemUtils.ItemsWithExpandLevel(View.Items).Select((tuple, index) => (tuple, index)))
    {
        var isSelected = View.SelectedItem == item;
        var fillColor = level == 0 ? "plum" : "lightblue";
        var opacity = 1.0;
        var handleRadius = 5;
        var endDate = GanttDateCalculator.CalculateEnd(item, View.Resources);
        <GanttBar Item="@item" Index="@index" Level="@level" ViewStart="@View.Start" PixelsPerDay="@View.PixelsPerDay" RowHeight="@View.RowHeight"
                  OnHandlePointerDown="@HandlePointerDownProxy" OnHandlePointerUp="@HandlePointerUpProxy"
                  IsSelected="@isSelected" FillColor="@fillColor" Opacity="@opacity" HandleRadius="@handleRadius" DragMode="@DragMode"
                  OnBarPointerDown="@((args) => HandleBarPointerDown(args))" EndDate="@endDate" />
    }
    <GanttConnections Items="@View.Items" View="@View" />
    <GanttDragOverlay IsDragging="@IsActive" DragSourceItem="@ActiveItem" DragSourceType="@DragSourceType" PointerX="@PointerX" PointerY="@PointerY" View="@View" />
</svg>

@code {
    [Parameter] public GanttDragMode DragMode { get; set; } = GanttDragMode.EditDate;

    [CascadingParameter] public GanttView View { get; set; } = null!;

    protected override void OnParametersSet()
    {
        if (View is null)
        {
            throw new InvalidOperationException("GanttView cascading parameter must not be null.");
        }
    }

    // Drag/move state
    private IGanttItem? ActiveItem;
    private GanttHandleType? DragSourceType;
    private bool IsActive;
    private string PointerX = "0";
    private string PointerY = "0";
    private double MoveStartOffsetDays;

    private void OnHandlePointerDown(IGanttItem item, GanttHandleType type, PointerEventArgs e)
    {
        ActiveItem = item;
        DragSourceType = type;
        IsActive = true;
        PointerX = e.OffsetX.ToString(CultureInfo.InvariantCulture);
        PointerY = e.OffsetY.ToString(CultureInfo.InvariantCulture);
        // DragMode bestäms nu av parameter
    }

    private void OnHandlePointerUp(IGanttItem targetItem, GanttHandleType targetType, PointerEventArgs e)
    {
        if (!IsActive || ActiveItem == null || DragSourceType == null)
            return;
        // Förhindra att koppla till sig själv
        if (targetItem == ActiveItem)
            return;

        // Koppla ActiveItem som predecessor eller successor
        if (targetType == GanttHandleType.Start || targetType == GanttHandleType.Milestone)
        {
            // Lägg till ActiveItem som predecessor till targetItem om den inte redan finns
            if (targetItem is { Predecessors: List<IGanttItem> preds })
            {
                if (!preds.Contains(ActiveItem))
                    preds.Add(ActiveItem);
            }
        }
        else if (targetType == GanttHandleType.End)
        {
            // Lägg till ActiveItem som successor till targetItem om den inte redan finns
            if (targetItem is { Successors: List<IGanttItem> succs })
            {
                if (!succs.Contains(ActiveItem))
                    succs.Add(ActiveItem);
            }
        }
        ResetActiveState();
        StateHasChanged();
    }

    private void OnPointerUp(PointerEventArgs e)
    {
        if (DragMode == GanttDragMode.EditDate && IsActive && ActiveItem != null)
        {
            IsActive = false;
            ActiveItem = null;
            MoveStartOffsetDays = 0;
            StateHasChanged();
        }
        else
        {
            ResetActiveState();
            StateHasChanged();
        }
    }
    void ResetActiveState()
    {
        IsActive = false;
        ActiveItem = null;
        DragSourceType = null;
        PointerX = "0";
        PointerY = "0";
    }
    private Task HandlePointerDownProxy((IGanttItem, GanttHandleType, PointerEventArgs) args)
    {
        OnHandlePointerDown(args.Item1, args.Item2, args.Item3);
        return Task.CompletedTask;
    }
    private Task HandlePointerUpProxy((IGanttItem, GanttHandleType, PointerEventArgs) args)
    {
        OnHandlePointerUp(args.Item1, args.Item2, args.Item3);
        return Task.CompletedTask;
    }

    private void HandleBarPointerDown((IGanttItem item, PointerEventArgs e, string type) args)
    {
        if (DragMode != GanttDragMode.EditDate) return;
        ActiveItem = args.item;
        IsActive = true;
        // Beräkna offset från musen till startdatum
        if (ActiveItem?.Start != null)
        {
            var mouseDay = View.Start.AddDays(args.e.OffsetX / View.PixelsPerDay);
            MoveStartOffsetDays = (mouseDay - ActiveItem.Start.Value).TotalDays;
        }
    }
    private void OnPointerMove(PointerEventArgs e)
    {
        if (IsActive && ActiveItem != null && DragMode == GanttDragMode.EditDate)
        {
            var mouseDay = View.Start.AddDays(e.OffsetX / View.PixelsPerDay - MoveStartOffsetDays);
            if (ActiveItem.Type == GanttItemType.Milestone || ActiveItem.Type == GanttItemType.Task)
            {
                ActiveItem.Start = mouseDay;
            }
            // End-hantering flyttas till GanttDateCalculator
        }
        else if (IsActive)
        {
            PointerX = e.OffsetX.ToString(CultureInfo.InvariantCulture);
            PointerY = e.OffsetY.ToString(CultureInfo.InvariantCulture);
            StateHasChanged();
        }
    }
}
