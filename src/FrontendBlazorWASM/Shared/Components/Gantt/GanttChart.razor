@using System.Collections.Generic
@using System

<svg style="height: calc(100% - @HeaderHeightPx); width: @SvgWidthPx;">
    @foreach (var (item, index) in ItemsWithExpand(Items).Select((item, index) => (item, index)))
    {
        var startX = (item.Start! - Start).Value.TotalDays * PixelsPerDay;
        var width = (item.End! - item.Start!).Value.TotalDays * PixelsPerDay;
        <rect x="@startX" y="@($"{index * RowPixelHeight + 2}px")" width="@width" height="@($"{RowPixelHeight - 4}px")" fill="blue" opacity="0.7" />
    }
</svg>

@code {
    [Parameter] public IEnumerable<IGanttItem>? Items { get; set; }
    [Parameter] public DateTime Start { get; set; }
    [Parameter] public DateTime End { get; set; }
    [Parameter] public GanttViewMode Mode { get; set; } = GanttViewMode.Month;
    [Parameter] public double RowPixelHeight { get; set; } = 30;
    [Parameter] public double PixelsPerDay { get; set; } = 30;
    [Parameter] public string SvgWidthPx { get; set; } = "600px";
    [Parameter] public string HeaderHeightPx { get; set; } = "50px";
    IEnumerable<IGanttItem> ItemsWithExpand(IEnumerable<IGanttItem>? items)
    {
        foreach (var item in items ?? Enumerable.Empty<IGanttItem>())
        {
            yield return item;
            if (item.IsExpanded && item.Children is not null)
            {
                foreach (var child in ItemsWithExpand(item.Children))
                    yield return child;
            }
        }
    }
}
