@using System.Collections.Generic
@using System
@using System.Globalization
@using Planity.FrontendBlazorWASM.Shared.Services
@using Planity.FrontendBlazorWASM.Shared.Components.Gantt

<svg class="gantt-chart@(IsDragging ? " grabbing" : "")" style="width: @View.SvgWidthPx ; height: 100%; position: absolute; top: 0; left: 0;"
     @onpointermove="OnPointerMove" @onpointerup="OnPointerUp">
    <defs>
        <filter id="glow" x="-30%" y="-30%" width="160%" height="160%">
            <feDropShadow dx="0" dy="0" stdDeviation="2" flood-color="gold" flood-opacity="1.0" />
            <feDropShadow dx="0" dy="0" stdDeviation="2" flood-color="gold" flood-opacity="1.0" />
        </filter>
        <marker id="arrowhead" markerWidth="10" markerHeight="7" refX="10" refY="3.5" orient="auto" markerUnits="strokeWidth">
            <polygon points="0 0, 10 3.5, 0 7" fill="#3a6ea5" />
        </marker>
        <marker id="arrowhead-gold" markerWidth="10" markerHeight="7" refX="10" refY="3.5" orient="auto" markerUnits="strokeWidth">
            <polygon points="0 0, 10 3.5, 0 7" fill="gold" />
        </marker>
    </defs>
    @foreach (var ((item, level), index) in GanttItemUtils.ItemsWithExpandLevel(View.Items).Select((tuple, index) => (tuple, index)))
    {
        var isSelected = View.SelectedItem == item;
        var fillColor = level == 0 ? "plum" : "lightblue";
        var opacity = 1.0;
        var handleRadius = 5;
        <GanttBar Item="@item" Index="@index" Level="@level" ViewStart="@View.Start" PixelsPerDay="@View.PixelsPerDay" RowHeight="@View.RowHeight"
                  OnHandlePointerDown="@HandlePointerDownProxy" OnHandlePointerUp="@HandlePointerUpProxy"
                  IsSelected="@isSelected" FillColor="@fillColor" Opacity="@opacity" HandleRadius="@handleRadius" />
    }
    <GanttConnections Items="@View.Items" View="@View" />
    <GanttDragOverlay IsDragging="@IsDragging" DragSourceItem="@DragSourceItem" DragSourceType="@DragSourceType" PointerX="@PointerX" PointerY="@PointerY" View="@View" />
</svg>

@code {
    [CascadingParameter] public GanttView View { get; set; } = null!;

    protected override void OnParametersSet()
    {
        if (View is null)
        {
            throw new InvalidOperationException("GanttView cascading parameter must not be null.");
        }
    }

    // Drag state
    private IGanttItem? DragSourceItem;
    private GanttHandleType? DragSourceType;
    private bool IsDragging;
    private string PointerX = "0";
    private string PointerY = "0";

    private void OnHandlePointerDown(IGanttItem item, GanttHandleType type, PointerEventArgs e)
    {
        DragSourceItem = item;
        DragSourceType = type;
        IsDragging = true;
        PointerX = e.OffsetX.ToString(CultureInfo.InvariantCulture);
        PointerY = e.OffsetY.ToString(CultureInfo.InvariantCulture);
    }

    private void OnHandlePointerUp(IGanttItem targetItem, GanttHandleType targetType, PointerEventArgs e)
    {
        if (!IsDragging || DragSourceItem == null || DragSourceType == null)
            return;
        // Förhindra att koppla till sig själv
        if (targetItem == DragSourceItem)
            return;

        // Koppla DragSourceItem som predecessor eller successor
        if (targetType == GanttHandleType.Start || targetType == GanttHandleType.Milestone)
        {
            // Lägg till DragSourceItem som predecessor till targetItem om den inte redan finns
            if (targetItem is { Predecessors: List<IGanttItem> preds })
            {
                if (!preds.Contains(DragSourceItem))
                    preds.Add(DragSourceItem);
            }
        }
        else if (targetType == GanttHandleType.End)
        {
            // Lägg till DragSourceItem som successor till targetItem om den inte redan finns
            if (targetItem is { Successors: List<IGanttItem> succs })
            {
                if (!succs.Contains(DragSourceItem))
                    succs.Add(DragSourceItem);
            }
        }
        // Nollställ drag-state
        IsDragging = false;
        DragSourceItem = null;
        DragSourceType = null;
        PointerX = "0";
        PointerY = "0";
        StateHasChanged();
    }

    private void OnPointerMove(PointerEventArgs e)
    {
        if (IsDragging)
        {
            PointerX = e.OffsetX.ToString(CultureInfo.InvariantCulture);
            PointerY = e.OffsetY.ToString(CultureInfo.InvariantCulture);
            StateHasChanged();
        }
    }

    private void OnPointerUp(PointerEventArgs e)
    {
        IsDragging = false;
        DragSourceItem = null;
        DragSourceType = null;
        PointerX = "0";
        PointerY = "0";
        StateHasChanged();
    }

    private Task HandlePointerDownProxy((IGanttItem, GanttHandleType, PointerEventArgs) args)
    {
        OnHandlePointerDown(args.Item1, args.Item2, args.Item3);
        return Task.CompletedTask;
    }
    private Task HandlePointerUpProxy((IGanttItem, GanttHandleType, PointerEventArgs) args)
    {
        OnHandlePointerUp(args.Item1, args.Item2, args.Item3);
        return Task.CompletedTask;
    }
}
