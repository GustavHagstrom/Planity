@inject IStringLocalizer<GanttView> Localizer

@if(Items is not null)
{
    <CascadingValue Value="this">
        <div class="d-flex" style="border-style: solid; border-width: 1px;">
            <GanttLeftPanel/>
            <div class="flex-grow-1 d-flex" style="width: calc(100% - @LeftWidthPx); overflow-y: hidden; flex-direction: column;">
                <GanttHeader />
                <div style="position: relative; width: @SvgWidthPx; height: calc(100% - @HeaderHeightPx);">
                    <GanttChart/>
                    <GanttGrid />
                </div>
            </div>
        </div>
    </CascadingValue>
    
}

@code {
    [Parameter] public DateTime Start { get; set; }
    [Parameter] public DateTime End { get; set; }
    [Parameter] public GanttViewMode Mode { get; set; } = GanttViewMode.Month;
    [Parameter] public IEnumerable<IGanttItem>? Items { get; set; }
    [Parameter] public IGanttItem? SelectedItem { get; set; }
    [Parameter] public EventCallback<IGanttItem?> SelectedItemChanged { get; set; }

    public double PixelsPerDay => Mode switch
    {
        GanttViewMode.Year => 5,
        GanttViewMode.Month => 30,
        GanttViewMode.Week => 108,
        _ => throw new ArgumentOutOfRangeException()
    };
    public string LeftWidthPx => $"220px";
    public double RowHeight { get; set; } = 30;
    public string RowHeightPx => $"{RowHeight}px";
    public double HeaderHeight => 60;
    public string HeaderHeightPx => $"{HeaderHeight}px";
    public double SvgWidth => Mode switch
    {
        GanttViewMode.Year => PixelsPerDay * (End - Start).Days,
        GanttViewMode.Month => PixelsPerDay * (End - Start).Days,
        GanttViewMode.Week => PixelsPerDay * (End - Start).Days,
        _ => throw new ArgumentOutOfRangeException()
    };
    public string SvgWidthPx => $"{SvgWidth}px";
    public int RowCount => GanttItemUtils.ItemsWithExpand(Items).Count();

    public async Task SelectItemAsync(IGanttItem? item)
    {
        SelectedItem = item;
        await SelectedItemChanged.InvokeAsync(item);
        StateHasChanged();
    }
    public void TriggerStateHasChanged()
    {
        StateHasChanged();
    }
}
