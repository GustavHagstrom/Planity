@inject IStringLocalizer<GanttView> Localizer
@inject IResourceService ResourceService
@using Planity.FrontendBlazorWASM.Shared.Abstractions
@using Planity.FrontendBlazorWASM.Shared.Models

@if(Items is not null)
{
    <CascadingValue Value="this">
        <div class="d-flex" style="height: 100%; flex-direction: column;">
            <GanttToolbar Title="@Title" DragMode="@_dragMode" DragModeChanged="OnDragModeChanged" Start="Start" End="End" DateRangeChanged="OnDateRangeChanged" />
            <div class="d-flex" style="flex-grow: 1; border: 1px solid black;">
                <GanttItemEditForm Item="SelectedItem" />
                <GanttLeftPanel/>
                <div class="flex-grow-1 d-flex" style="width: calc(100% - @LeftWidthPx); overflow-y: hidden; flex-direction: column;">
                    <GanttHeader />
                    <div style="position: relative; width: @SvgWidthPx; height: calc(100% - @HeaderHeightPx);">
                        <GanttGrid />
                        <GanttChart DragMode="@_dragMode" />
                    </div>
                </div>
            </div>
        </div>
    </CascadingValue>
}

@code {

    [Parameter] public DateTime StartParam { get; set; } = DateTime.Today.AddMonths(-1);
    [Parameter] public DateTime EndParam { get; set; } = DateTime.Today.AddMonths(3);
    [Parameter] public GanttViewMode Mode { get; set; } = GanttViewMode.Month;
    [Parameter] public string Title { get; set; } = "Gantt Chart";
    [Parameter, EditorRequired] public IEnumerable<IGanttItem> ItemsParam { get; set; } = [];
    [Parameter, EditorRequired] public IEnumerable<GanttItemLink> LinksParam { get; set; } = [];

    public IReadOnlyList<IGanttItem> Items => _editItems;
    public IReadOnlyList<GanttItemLink> Links => _editLinks;
    public IReadOnlyDictionary<string, IGanttItem> GanttItemById => _itemById;
    public IReadOnlySet<LinkKey> LinkKeys => _LinkKeys;

    public double Zoom { get; private set; } = 1.0;
    public DateTime Start { get; private set; }
    public DateTime End { get; private set; }
    public IGanttItem? SelectedItem { get; private set; }
    public double PixelsPerDay => Mode switch
    {
        GanttViewMode.Year => 5 * Zoom,
        GanttViewMode.Month => 30 * Zoom,
        GanttViewMode.Week => 108 * Zoom,
        _ => throw new ArgumentOutOfRangeException()
    };
    public string LeftWidthPx => $"220px";
    public double RowHeight => 30;
    public string RowHeightPx => $"{RowHeight}px";
    public double HeaderHeight => 60;
    public string HeaderHeightPx => $"{HeaderHeight}px";
    public double SvgWidth => Mode switch
    {
        GanttViewMode.Year => PixelsPerDay * (End - Start).Days,
        GanttViewMode.Month => PixelsPerDay * (End - Start).Days,
        GanttViewMode.Week => PixelsPerDay * (End - Start).Days,
        _ => throw new ArgumentOutOfRangeException()
    };
    public string SvgWidthPx => $"{SvgWidth}px";
    public int RowCount => GanttItemUtils.ItemsWithExpand(Items).Count();
    public IReadOnlyList<Resource> Resources { get; private set; } = [];

    List<GanttItemLink> _sourceLinks = [];
    List<IGanttItem> _sourceItems = [];
    List<GanttItemLink> _editLinks = [];
    List<IGanttItem> _editItems = [];

    public record struct LinkKey(string FromId, string ToId);

    Dictionary<string, IGanttItem> _itemById = new();
    HashSet<LinkKey> _LinkKeys = [];
    private GanttDragMode _dragMode = GanttDragMode.None;


    protected override async Task OnInitializedAsync()
    {
        Start = StartParam;
        End = EndParam;
        Resources = await ResourceService.GetResourcesAsync() ?? [];
        CloneItemAndLinkLists();
        BuildItemAndLinkDictionaries();
        SelectedItem = _editItems.FirstOrDefault();

    }
    void CloneItemAndLinkLists()
    {
        _sourceItems = ItemsParam.Select(i => i.Clone()).ToList() ?? [];
        _sourceLinks = Links.Select(l => l.Clone()).ToList();
        _editItems = ItemsParam.Select(i => i.Clone()).ToList();
        _editLinks = Links.Select(l => l.Clone()).ToList();
    }
    void BuildItemAndLinkDictionaries()
    {
        _itemById = _editItems.ToDictionary(i => i.Id, i => i);
        _LinkKeys = _editLinks.Select(l => new LinkKey(l.From.Id, l.To.Id)).ToHashSet();

    }
    void OnDateRangeChanged(DateRange range)
    {
        bool changed = false;
        if (Start != range.Start)
        {
            Start = range.Start ?? Start;
            changed = true;
        }
        if (End != range.End)
        {
            End = range.End ?? End;
            changed = true;
        }
        if (changed)
        {
            StateHasChanged();
        }
    }
    private void OnDragModeChanged(GanttDragMode mode)
    {
        _dragMode = mode;
        StateHasChanged();
    }
    public void SelectItem(IGanttItem? item)
    {
        SelectedItem = item;
        StateHasChanged();
    }
    public void AddLink(GanttItemLink link)
    {
        var linkKey = new LinkKey(link.From.Id, link.To.Id);
        if (!_LinkKeys.Contains(linkKey))
        {
            _editLinks.Add(link);
            _LinkKeys.Add(linkKey);
            StateHasChanged();
        }
    }
    public void RemoveLink(GanttItemLink link)
    {
        var linkKey = new LinkKey(link.From.Id, link.To.Id);
        if (_LinkKeys.Contains(linkKey))
        {
            _editLinks.Remove(link);
            _LinkKeys.Remove(linkKey);
            StateHasChanged();
        }
    }
    public void TriggerStateHasChanged()
    {
        StateHasChanged();
    }
}
