@inject IStringLocalizer<GanttView> Localizer
@inject IResourceService ResourceService
@using Planity.FrontendBlazorWASM.Shared.Abstractions
@using MudBlazor

@if(Items is not null)
{
    <CascadingValue Value="this">
        <div class="d-flex" style="height: 100%; flex-direction: column;">
            <GanttToolbar Title="@Title" DragMode="@_dragMode" DragModeChanged="OnDragModeChanged" @bind-Start="Start" @bind-End="End"/>
            <div class="d-flex" style="flex-grow: 1; border: 1px solid black;">
                <GanttItemEditForm Item="SelectedItem" />
                <GanttLeftPanel/>
                <div class="flex-grow-1 d-flex" style="width: calc(100% - @LeftWidthPx); overflow-y: hidden; flex-direction: column;">
                    <GanttHeader />
                    <div style="position: relative; width: @SvgWidthPx; height: calc(100% - @HeaderHeightPx);">
                        <GanttGrid />
                        <GanttChart DragMode="@_dragMode" />
                    </div>
                </div>
            </div>
        </div>
    </CascadingValue>
}

@code {

    [Parameter] public DateTime Start { get; set; }
    [Parameter] public DateTime End { get; set; }
    [Parameter] public GanttViewMode Mode { get; set; } = GanttViewMode.Month;
    [Parameter] public IEnumerable<IGanttItem>? Items { get; set; }
    [Parameter] public IGanttItem? SelectedItem { get; set; }
    [Parameter] public EventCallback<IGanttItem?> SelectedItemChanged { get; set; }
    [Parameter] public double Zoom { get; set; } = 1.0;
    [Parameter] public string Title { get; set; } = "Gantt Chart";


    List<IGanttItem> _sourceItems = new();
    private GanttDragMode _dragMode = GanttDragMode.None;

    protected override async Task OnInitializedAsync()
    {
        Resources = await ResourceService.GetResourcesAsync() ?? new List<Resource>();
        foreach (var item in Items ?? [])
        {
            _sourceItems.Add(item.Clone());
        }
        SelectedItem = Items?.FirstOrDefault();
    }

    private void OnDragModeChanged(GanttDragMode mode)
    {
        _dragMode = mode;
        StateHasChanged();
    }

    public double PixelsPerDay => Mode switch
    {
        GanttViewMode.Year => 5 * Zoom,
        GanttViewMode.Month => 30 * Zoom,
        GanttViewMode.Week => 108 * Zoom,
        _ => throw new ArgumentOutOfRangeException()
    };
    public string LeftWidthPx => $"220px";
    public double RowHeight { get; set; } = 30;
    public string RowHeightPx => $"{RowHeight}px";
    public double HeaderHeight => 60;
    public string HeaderHeightPx => $"{HeaderHeight}px";
    public double SvgWidth => Mode switch
    {
        GanttViewMode.Year => PixelsPerDay * (End - Start).Days,
        GanttViewMode.Month => PixelsPerDay * (End - Start).Days,
        GanttViewMode.Week => PixelsPerDay * (End - Start).Days,
        _ => throw new ArgumentOutOfRangeException()
    };
    public string SvgWidthPx => $"{SvgWidth}px";
    public int RowCount => GanttItemUtils.ItemsWithExpand(Items).Count();
    public List<Resource> Resources { get; set; } = new();

    

    public async Task SelectItemAsync(IGanttItem? item)
    {
        SelectedItem = item;
        await SelectedItemChanged.InvokeAsync(item);
        StateHasChanged();
    }

    public void TriggerStateHasChanged()
    {
        StateHasChanged();
    }
}
