@using System.Globalization

@if(Items is not null)
{
    <div class="d-flex" style="border-style: solid; border-width: 2px;">

        @* left side, edit for control per row *@
        <div style="width: @LeftWidthPx; padding-top: @HeaderHeightPx; overflow-x: scroll;">
            @foreach (var item in Items)
            {
                <div style="height: @RowHeightPx; width: 100%;">
                    <div class="gantt-row-content">
                        @* Render item content here, e.g. item.Name *@
                        @item.Name
                    </div>
                </div>
            }
        </div>

        @* right side *@
        <div class="flex-grow-1" style="overflow-x: scroll; overflow-y: hidden;">
            <svg style="height: calc(100% - @HeaderHeightPx); width: @SvgWidthPx; margin-top: @HeaderHeightPx;">
                <rect x="0" y="0" width="600px" height="@HeaderHeightPx" fill="lightgray" />
                @* ...här kan du rendera tasks, milstolpar etc... *@
                @* Rutnätet, renderas sist över allt annat *@
                @foreach (var x in GetGridLineXs())
                {
                    <rect x="@x" y="0" width="1" height="100%" stroke="black" stroke-width="1" opacity="0.7" />
                }
            </svg>
        </div>
    </div>
}

@code {

    public enum GanttViewMode
    {
        Year,
        Month,
        Week,
        Day
    }

    [Parameter] public DateTime Start { get; set; }
    [Parameter] public DateTime End { get; set; }
    [Parameter] public GanttViewMode Mode { get; set; } = GanttViewMode.Month;
    [Parameter] public double RowPixelHeight { get; set; } = 50;
    [Parameter] public IEnumerable<IGanttItem>? Items { get; set; }

    double PixelsPerDay => Mode switch
    {
        GanttViewMode.Year => 1,
        GanttViewMode.Month => 54,
        GanttViewMode.Week => 216,
        GanttViewMode.Day => 1080,
        _ => throw new ArgumentOutOfRangeException()
    };
    string LeftWidthPx => $"220px";
    string RowHeightPx => $"50px";
    string HeaderHeightPx => $"50px";
    
    string SvgWidthPx => Mode switch
    {
        GanttViewMode.Year => $"{PixelsPerDay * (End - Start).Days}px",
        GanttViewMode.Month => $"{PixelsPerDay * (End - Start).Days}px",
        GanttViewMode.Week => $"{PixelsPerDay * (End - Start).Days}px",
        GanttViewMode.Day => $"{PixelsPerDay * (End - Start).Days}px",
        _ => throw new ArgumentOutOfRangeException()
    };

    // Dynamisk höjd för rutnätet (t.ex. antal rader * radpixlar)
    double GridHeight => (Items?.Count() ?? 0) * RowPixelHeight;
    string GridHeightPx => $"{GridHeight}";

    // Returnerar x-koordinater för vertikala rutnätslinjer baserat på Mode
    private IEnumerable<double> GetGridLineXs()
    {
        int interval = Mode switch
        {
            GanttViewMode.Year => PixelsPerDay,
            GanttViewMode.Month => 30,
            GanttViewMode.Week => 7,
            GanttViewMode.Day => 1,
            _ => 1
        };
        int totalDays = (End - Start).Days;
        for (int i = 0; i <= totalDays; i += interval)
        {
            yield return i * PixelsPerDay;
        }
    }
}