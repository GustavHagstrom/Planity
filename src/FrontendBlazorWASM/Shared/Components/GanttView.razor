@using System.Globalization

@if(Items is not null)
{
    <div class="d-flex" style="border-style: solid; border-width: 2px;">

        @* left side, edit for control per row *@
        <div style="width: @LeftWidthPx; padding-top: @HeaderHeightPx; overflow-x: scroll;">
            @foreach (var item in Items)
            {
                <div style="height: @RowHeightPx; width: 100%;">
                    <div class="gantt-row-content">
                        @* Render item content here, e.g. item.Name *@
                        @item.Name
                    </div>
                </div>

            }

        </div>

        @* right side *@
        <div class="flex-grow-1" style="overflow-x: scroll; overflow-y: hidden;">
            <svg style="height: calc(100% - @HeaderHeightPx); width: @SvgWidthPx; background-color: red; margin-top: @HeaderHeightPx;">

                <rect x="0" y="0" width="600px" height="@HeaderHeightPx" fill="lightgray" />
            </svg>
        </div>

    </div>
}

    





@code {

    public enum GanttViewMode
    {
        Year,
        Month,
        Week,
        Day
    }

    [Parameter] public DateTime Start { get; set; }
    [Parameter] public DateTime End { get; set; }
    [Parameter] public GanttViewMode Mode { get; set; } = GanttViewMode.Month;
    [Parameter] public double RowPixelHeight { get; set; } = 50;
    [Parameter] public IEnumerable<IGanttItem>? Items { get; set; }

    double PixelsPerDay => Mode switch
    {
        GanttViewMode.Year => 1,
        GanttViewMode.Month => 54,
        GanttViewMode.Week => 216,
        GanttViewMode.Day => 1080,
        _ => throw new ArgumentOutOfRangeException()
    };
    string LeftWidthPx => $"220px";
    string RowHeightPx => $"50px";
    string HeaderHeightPx => $"50px";
    
    string SvgWidthPx => Mode switch
    {
        GanttViewMode.Year => $"{PixelsPerDay * (End - Start).Days}px",
        GanttViewMode.Month => $"{PixelsPerDay * (End - Start).Days}px",
        GanttViewMode.Week => $"{PixelsPerDay * (End - Start).Days}px",
        GanttViewMode.Day => $"{PixelsPerDay * (End - Start).Days}px",
        _ => throw new ArgumentOutOfRangeException()
    };


    private IEnumerable<DateTime> EachDay(DateTime from, DateTime to)
    {
        for (var day = from.Date; day <= to.Date; day = day.AddDays(1))
            yield return day;
    }
}