@implements IDisposable
@inject NavigationManager NavigationManager


@if(MenuLinks.Count != 0)
{
    <MudMenu Dense="true">
        <ActivatorContent>
            <MudText Style="@MenuStyle(FeatureRoute, Match)" Class="mud-button" Typo="Typo.body2">
                @MenuTitle
            </MudText>
        </ActivatorContent>
        <ChildContent>
            @foreach (var link in MenuLinks)
            {
                <MudMenuItem Href="@link.Route" Label="@link.Title" Style="@MenuItemStyle(link.Route, link.Match)" />
            }
        </ChildContent>

    </MudMenu>
}
else
{
    <a href="@FeatureRoute">
        <MudText Typo="Typo.body2" Style="@($"{MenuStyle(FeatureRoute, Match)}")" Class="mud-button">
            @MenuTitle
        </MudText>
    </a>
    
}


@code {

    

    [Parameter] public string MenuTitle { get; set; } = string.Empty;
    [Parameter] public string? FeatureRoute { get; set; }
    [Parameter] public List<MenuLink> MenuLinks { get; set; } = [];
    [Parameter] public NavLinkMatch Match { get; set; } = NavLinkMatch.Prefix;



    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += (s, e) => StateHasChanged();
    }
    public void Dispose()
    {
        NavigationManager.LocationChanged -= (s, e) => StateHasChanged();        
    }

    string MenuStyle(string? href, NavLinkMatch? match)
    {
        string baseStyle = "align-content: center; padding-left: 12px; padding-right: 12px;";
        return $"{baseStyle} {GetActiveStyle(href, match)}";
    }
    string MenuItemStyle(string? href, NavLinkMatch? match)
    {
        string baseStyle = "";
        return $"{baseStyle} {GetActiveStyle(href, match)}";
    }

    string GetActiveStyle(string? href, NavLinkMatch? match)
    {
        if(IsActive(href, match))
        {
            return "color: var(--mud-palette-primary); background: var(--mud-palette-action-default-hover);";
        }
        return string.Empty;
    }

    bool IsActive(string? href, NavLinkMatch? match)
    {
        var currentUri = NavigationManager.Uri;
        var baseUri = NavigationManager.BaseUri.TrimEnd('/');
        var targetUri = NavigationManager.ToAbsoluteUri(href).ToString();

        if (match == NavLinkMatch.All && href is not null)
        {
            return currentUri == targetUri || currentUri == $"{baseUri}{href.TrimStart('/')}";
        }
        else if (match == NavLinkMatch.Prefix && href is not null)
        {
            return currentUri.StartsWith(targetUri) || currentUri.StartsWith($"{baseUri}{href.TrimStart('/')}");
        }
        return false;
    }     
}
