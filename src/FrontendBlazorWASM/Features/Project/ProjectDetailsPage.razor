@page "/projects/{id}"
@inject NavigationManager NavigationManager
@inject IProjectService ProjectService
@inject IStringLocalizer<ProjectDetailsPage> localizer
@inject IJSRuntime JS

<EntityFormsPageLayout Title="@localizer["Projektinformation"]" IsLoading="Project is null" OnSave="Save">
    <MainContent>

        <ProjectForm ProjectModel="Project"/>

        <MudDivider Class="my-4"></MudDivider>
        <EntityList TItem="ProjectTask" Title="@localizer["Uppgifter"]" Items="Project?.Tasks">
            <HeaderContent>
                <MudTh>@localizer["Namn"]</MudTh>
                <MudTh>@localizer["Status"]</MudTh>
            </HeaderContent>
            <RowTemplate Context="task">
                <MudTd>
                    <MudText>
                        <MudLink Href="@Planity.FrontendBlazorWASM.Routes.TaskDetails(task.Id)">@task.Name</MudLink>
                    </MudText>
                </MudTd>
                <MudTd>
                    <MudChip T="string" Color="Color.Info">@task.Status</MudChip>
                </MudTd>
            </RowTemplate>
        </EntityList>
        <EntityList TItem="Milestone" Title="Milestones" Items="Project.Milestones">
            <RowTemplate Context="milestone">
                <div class="d-flex">
                    <MudText>
                        <MudLink Href="@Planity.FrontendBlazorWASM.Routes.MilestoneDetails(milestone.Id)">@milestone.Name</MudLink>
                    </MudText>
                    <MudChip T="string" Color="@(milestone.IsCompleted? Color.Success: Color.Default)">@((milestone.IsCompleted ? "Klar" : "Ej klar"))</MudChip>
                </div>
            </RowTemplate>
        </EntityList>
        
    </MainContent>
</EntityFormsPageLayout>


@code {
    [Parameter] public string? Id { get; set; }

    private Project? Project;

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(Id))
        {
            var project = await ProjectService.GetProjectByIdAsync(Id);
            if (project != null)
                Project = project;
        }
    }

    private async Task Save()
    {
        if (Project == null)
            return;
        await ProjectService.UpdateProjectAsync(Project);
        await JS.InvokeVoidAsync("history.back");
    }
}
