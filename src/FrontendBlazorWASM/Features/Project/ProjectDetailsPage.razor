@page "/projects/{id}"

@inject NavigationManager NavigationManager
@inject IProjectService ProjectService
@inject IStringLocalizer<ProjectDetailsPage> localizer

<MudPaper Class="pa-4">
    <MudText Typo="Typo.h5">@localizer["Projektinformation"]</MudText>

    <MudTextField T="string" Label="@localizer["Projektnamn"]" @bind-Value="Project.Name" />
    <MudTextField T="string" Label="@localizer["Beskrivning"]" @bind-Value="Project.Description" />
    <MudSelect T="ProjectStatus" Label="@localizer["Status"]" @bind-Value="Project.Status">
        @foreach (var status in Enum.GetValues<ProjectStatus>())
        {
            <MudSelectItem Value="@status">@status</MudSelectItem>
        }
    </MudSelect>

    <MudDivider Class="my-4" />

    <MudText Typo="Typo.h6">@localizer["Uppgifter"]</MudText>
    <MudList T="ProjectTask" >
        @foreach (var task in Project.Tasks)
        {
            <MudListItem>
                
                    <MudText>
                        <MudLink Href="@Planity.FrontendBlazorWASM.Routes.TaskDetails(task.Id)">
                        @task.Name

                    </MudLink>
                    </MudText>
                    <MudChip Color="Color.Info">@task.Status</MudChip>
                
            </MudListItem>
        }
    </MudList>

    <MudText Typo="Typo.h6">Milestones</MudText>
    <MudList T="Milesonte">
        @foreach (var milestone in Project.Milestones)
        {
            <MudListItem>
                <MudText>
                    <MudLink Href="@Planity.FrontendBlazorWASM.Routes.MilestoneDetails(milestone.Id)">@milestone.Name</MudLink>
                </MudText>
                <MudChip Color="@(milestone.IsCompleted ? Color.Success : Color.Default)">@((milestone.IsCompleted ? "Klar" : "Ej klar"))</MudChip>
            </MudListItem>
        }
    </MudList>

    <MudButton Color="Color.Primary" OnClick="SaveProject">@localizer["Spara ändringar"]</MudButton>
</MudPaper>

@code {
    [Parameter] public string? Id { get; set; }

    private Project Project = new();
    private bool IsLoading = true;

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(Id))
        {
            var project = await ProjectService.GetProjectByIdAsync(Id);
            if (project != null)
                Project = project;
        }
        IsLoading = false;
    }

    private async Task SaveProject()
    {
        await ProjectService.UpdateProjectAsync(Project);
        NavigationManager.NavigateTo("/projects");
    }
}
