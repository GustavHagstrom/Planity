@page "/projects"
@inject NavigationManager NavigationManager
@inject IStringLocalizer<ProjectsOverviewPage> localizer
@inject IResourceService ResourceService
@inject IDateCalculator GanttDateCalculator
@inject IProjectService ProjectService
@inject ProjectFactory ProjectFactory
@inject SelectedProjectsState ProjectsState

<OverviewPageLayout Title="@localizer["Projektöversikt"]" Class="d-flex">
    <LeftActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => NavigationManager.NavigateTo(Planity.FrontendBlazorWASM.Routes.ProjectsNew))" Size="Size.Small" StartIcon="@Icons.Material.Filled.Add" >
            <span>@localizer["Nytt projekt"]</span>
        </MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@ViewSelectionInGantt" Size="Size.Small" StartIcon="@Icons.Material.Filled.ViewTimeline">
            <span>@localizer["Visa urval i Gantt"]</span>
        </MudButton>
    </LeftActions>
    <MiddleActions>

    </MiddleActions>
    <RightActions>
        <PlanitySearchField @bind-Value="FilterString" />
    </RightActions>

    <ChildContent>
        <MudContainer>
            <EntityTable Items="@Projects" Filter="FilterFunction">
                <HeaderContent>
                    <TableHeaderTextFilter T="EndDateProject" Title="@localizer["Namn"]" SortBy="new Func<EndDateProject, object>(x => x.Name)" @bind-FilterString="NameFilter" />
                    <TableHeaderTextFilter T="EndDateProject" Title="@localizer["Beskrivning"]" SortBy="new Func<EndDateProject, object>(x => x.Description)" @bind-FilterString="DescriptionFilter" />
                    <TableHeaderDateFilter T="EndDateProject" Title="@localizer["Start"]" SortBy="new Func<EndDateProject, object?>(x => x.Start)" @bind-FilterDate="@FromDateFilter" PlaceHolder="@localizer["Från"]" />
                    <TableHeaderDateFilter T="EndDateProject" Title="@localizer["Slut"]" SortBy="new Func<EndDateProject, object?>(x => x.End)" @bind-FilterDate="@ToDateFilter" PlaceHolder="@localizer["Till"]" />

                    <MudTh>
                        <MudStack Spacing="0">
                            <MudText><b>Handlingar</b></MudText>
                            <MudField Variant="Variant.Outlined" Margin="Margin.Dense" Style="visibility: hidden;" />
                        </MudStack>
                    </MudTh>

                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.Name</MudTd>
                    <MudTd>@context.Description</MudTd>
                    <MudTd>@context.Start?.ToShortDateString()</MudTd>
                    <MudTd>@context.End?.ToShortDateString()</MudTd>
                    <MudTd>
                        <MudIconButton Size="Size.Small" Color="Color.Primary" Icon="@Icons.Material.Sharp.Edit" Href="@Routes.ProjectDetails(context.Id)" />
                        <MudIconButton Size="Size.Small" Icon="@Icons.Material.Sharp.Delete" Color="Color.Error" />
                    </MudTd>
                </RowTemplate>
            </EntityTable>
        </MudContainer>
            
    </ChildContent>
</OverviewPageLayout>


@code {
    private List<EndDateProject> Projects = new();

    string NameFilter = string.Empty;
    string DescriptionFilter = string.Empty;
    DateTime? FromDateFilter;
    DateTime? ToDateFilter;
    string FilterString = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var projects = await ProjectService.GetProjectsAsync();
        var resources = await ResourceService.GetOrganizationResources();

        Projects = projects?.Select(p => ProjectFactory.CreateEndDateProject(p, resources)).ToList() ?? new List<EndDateProject>();
    }

    bool FilterFunction(EndDateProject project)
    {
        bool nameMatches = false;
        bool descriptionMatches = false;
        bool fromMatches = false;
        bool toMatches = false;
        bool filterMatches = false;

        if (string.IsNullOrWhiteSpace(NameFilter) || project.Name.Contains(NameFilter, StringComparison.OrdinalIgnoreCase)) nameMatches = true;
        else return false;
        if (string.IsNullOrWhiteSpace(DescriptionFilter) || project.Description.Contains(DescriptionFilter, StringComparison.OrdinalIgnoreCase)) descriptionMatches = true;
        else return false;
        if (FromDateFilter is null || project.Start >= FromDateFilter) fromMatches = true;
        else return false;
        if (ToDateFilter is null || project.End <= ToDateFilter?.Date) toMatches = true;
        else return false;

        if (string.IsNullOrWhiteSpace(FilterString)) filterMatches = true;
        if (project.Name.Contains(FilterString, StringComparison.OrdinalIgnoreCase)) filterMatches = true;
        if (project.Description != null && project.Description.Contains(FilterString, StringComparison.OrdinalIgnoreCase)) filterMatches = true;

        return nameMatches && descriptionMatches && fromMatches && toMatches && filterMatches;
    }
    void ViewSelectionInGantt()
    {
        ProjectsState.ProjectIds = Projects.Where(p => FilterFunction(p)).Select(p => p.Id).ToList();
        NavigationManager.NavigateTo(Planity.FrontendBlazorWASM.Routes.ProjectGantt);
    }
}