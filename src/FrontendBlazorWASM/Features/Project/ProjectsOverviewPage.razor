@page "/projects"
@inject NavigationManager NavigationManager
@inject IStringLocalizer<ProjectsOverviewPage> localizer
@inject IResourceService ResourceService
@inject IDateCalculator GanttDateCalculator
@inject IProjectService ProjectService

<OverviewPageLayout Title="@localizer["Projektöversikt"]" Class="d-flex">
    <LeftActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => NavigationManager.NavigateTo(Planity.FrontendBlazorWASM.Routes.ProjectsNew))" Size="Size.Small" StartIcon="@Icons.Material.Filled.Add" >
            <span>@localizer["Nytt projekt"]</span>
        </MudButton>
    </LeftActions>
    <MiddleActions>

    </MiddleActions>
    <RightActions>
        <PlanitySearchField @bind-Value="FilterString" />
    </RightActions>

    <ChildContent>
        <MudContainer>
            <EntityTable Items="@Projects" Filter="FilterFunction">
                <HeaderContent>
                    <MudTh>
                        <MudStack Spacing="0">
                            <b>Namn</b>
                            <PlanityFilterField @bind-Value="@NameFilter"/>
                        </MudStack>
                    </MudTh>
                    <MudTh>
                        <b>Beskrivning</b>
                        <PlanityFilterField @bind-Value="@DescriptionFilter"/>
                        @* <MudField Variant="Variant.Outlined" Margin="Margin.Dense" Style="visibility: hidden;" /> *@
                    </MudTh>
                    <MudTh>
                        <MudStack Spacing="0">
                            <b>Start</b>
                            <MudDatePicker @bind-Date="@FromDateFilter" Placeholder="Från" Variant="Variant.Outlined" Margin="Margin.Dense" OpenTo="OpenTo.Month" Clearable="true" />
                        </MudStack>
                    </MudTh>
                    <MudTh>
                        <MudStack Spacing="0">
                            <b>Slut</b>
                            <MudDatePicker @bind-Date="@ToDateFilter" Placeholder="Till" Variant="Variant.Outlined" Margin="Margin.Dense" OpenTo="OpenTo.Month" Clearable="true" />
                        </MudStack>
                    </MudTh>
                    <MudTh>
                        <MudStack Spacing="0">
                            <b>Handlingar</b>
                            <MudField Variant="Variant.Outlined" Margin="Margin.Dense" Style="visibility: hidden;" />
                        </MudStack>
                    </MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.Name</MudTd>
                    <MudTd>@context.Description</MudTd>
                    <MudTd>@context.Start?.ToShortDateString()</MudTd>
                    <MudTd>@GanttDateCalculator.CalculateEnd(context, Resources)?.ToShortDateString()</MudTd>
                    <MudTd>
                        <MudIconButton Size="Size.Small" Color="Color.Primary" Icon="@Icons.Material.Sharp.Edit" Href="@Routes.ProjectDetails(context.Id)" />
                        <MudIconButton Size="Size.Small" Icon="@Icons.Material.Sharp.Delete" Color="Color.Error" />
                    </MudTd>
                </RowTemplate>
            </EntityTable>
        </MudContainer>
            
    </ChildContent>
</OverviewPageLayout>


@code {
    private List<Project> Projects = new();
    private List<Resource> Resources = new();

    string NameFilter = string.Empty;
    string DescriptionFilter = string.Empty;
    DateTime? FromDateFilter;
    DateTime? ToDateFilter;
    string FilterString = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        Projects = await ProjectService.GetProjectsAsync();
        Resources = await ResourceService.GetOrganizationResources();
    }

    bool FilterFunction(Project project)
    {
        bool nameMatches = false;
        bool descriptionMatches = false;
        bool fromMatches = false;
        bool toMatches = false;
        bool filterMatches = false;

        if (string.IsNullOrWhiteSpace(NameFilter) || project.Name.Contains(NameFilter)) nameMatches = true;
        if (string.IsNullOrWhiteSpace(DescriptionFilter) || project.Description.Contains(DescriptionFilter)) descriptionMatches = true;

        // throw new NotImplementedException("Filtering null-dates seems to crash the app.");
        if (FromDateFilter is null || project.Start >= FromDateFilter) fromMatches = true;
        if (ToDateFilter is null || GanttDateCalculator.CalculateEnd(project, Resources) <= ToDateFilter) toMatches = true;

        if (string.IsNullOrWhiteSpace(FilterString)) filterMatches = true;
        if (project.Name.Contains(FilterString, StringComparison.OrdinalIgnoreCase)) filterMatches = true;
        if (project.Description != null && project.Description.Contains(FilterString, StringComparison.OrdinalIgnoreCase)) filterMatches = true;
        
        return nameMatches && descriptionMatches && fromMatches && toMatches && filterMatches;
    }
}