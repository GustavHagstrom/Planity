@page "/projects"
@inject NavigationManager NavigationManager
@inject IStringLocalizer<ProjectsOverviewPage> localizer
@inject IResourceService ResourceService
@inject IDateCalculator GanttDateCalculator
@inject IProjectService ProjectService

<OverviewPageLayout Title="@localizer["Projektöversikt"]" Class="d-flex">
    <LeftActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => NavigationManager.NavigateTo(Planity.FrontendBlazorWASM.Routes.ProjectsNew))" Size="Size.Small" StartIcon="@Icons.Material.Filled.Add" >
            <span>@localizer["Nytt projekt"]</span>
        </MudButton>
    </LeftActions>
    <MiddleActions>

    </MiddleActions>
    <RightActions>
        <PlanitySearchField @bind-Value="FilterString" />
    </RightActions>

    <ChildContent>
        <MudContainer>
            <EntityTable Items="@Projects" Filter="FilterFunction">
                <HeaderContent>
                    <MudTh>Namn</MudTh>
                    <MudTh>Beskrivning</MudTh>
                    <MudTh>Start</MudTh>
                    <MudTh>Slut</MudTh>
                    <MudTh>Handlingar</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.Name</MudTd>
                    <MudTd>@context.Description</MudTd>
                    <MudTd>@context.Start?.ToShortDateString()</MudTd>
                    <MudTd>@GanttDateCalculator.CalculateEnd(context, Resources)?.ToShortDateString()</MudTd>
                    <MudTd>
                        <MudIconButton Size="Size.Small" Color="Color.Primary" Icon="@Icons.Material.Sharp.Edit" Href="@Routes.ProjectDetails(context.Id)" />
                        <MudIconButton Size="Size.Small" Icon="@Icons.Material.Sharp.Delete" Color="Color.Error" />
                    </MudTd>
                </RowTemplate>
            </EntityTable>
        </MudContainer>
            
    </ChildContent>
</OverviewPageLayout>


@code {
    private List<Project> Projects = new();
    private List<Resource> Resources = new();

    string FilterString = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        Projects = await ProjectService.GetProjectsAsync();
        Resources = await ResourceService.GetOrganizationResources();
    }

    bool FilterFunction(Project project)
    {
        if (string.IsNullOrWhiteSpace(FilterString))
            return true;
        if (project.Name.Contains(FilterString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (project.Description != null && project.Description.Contains(FilterString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}