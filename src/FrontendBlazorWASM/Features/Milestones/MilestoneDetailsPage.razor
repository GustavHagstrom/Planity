@page "/milestones/{MilestoneId}"
@inject IProjectService ProjectService
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject IStringLocalizer<MilestoneDetailsPage> localizer

<MudPaper Class="pa-4">
    <EntityForm TModel="Milestone" Model="milestone" OnValidSubmit="SaveMilestone" Title="@localizer["Milstensinformation"]">
        @if (milestone == null)
        {
            <MudProgressCircular Indeterminate Color="Color.Primary"></MudProgressCircular>
        }
        else
        {
        
            <MudTextField T="string" @bind-Value="milestone.Name" Label="Namn" For="() => milestone.Name" Required="true"></MudTextField>
            <MudTextField T="string" @bind-Value="milestone.Description" Label="Beskrivning" For="() => milestone.Description"></MudTextField>
            <MudDatePicker @bind-Date="milestone.Date" Label="Datum"></MudDatePicker>
            <MudCheckBox T="bool" @bind-Value="milestone.IsCompleted" Color="Color.Primary" Label="Klar"></MudCheckBox>
        
        }
    </EntityForm>
</MudPaper>

@code {
    [Parameter] public string? MilestoneId { get; set; }
    private Milestone? milestone;
    private string? projectId;

    protected override async Task OnParametersSetAsync()
    {
        // Find the project and milestone by searching all projects
        var projects = await ProjectService.GetProjectsAsync();
        var found = projects.SelectMany(p => p.Milestones.Select(m => (Milestone: m, ProjectId: p.Id)))
                            .FirstOrDefault(x => x.Milestone.Id == MilestoneId);
        milestone = found.Milestone;
        projectId = found.ProjectId;
    }

    private async Task SaveMilestone()
    {
        if (milestone != null && projectId != null)
        {
            await ProjectService.UpdateMilestoneAsync(projectId, milestone);
            await JS.InvokeVoidAsync("history.back");
        }
    }
}
