@page "/milestones"
@inject IProjectService ProjectService
@inject NavigationManager NavigationManager
@inject IStringLocalizer<MilestoneOverviewPage> localizer


<OverviewPageLayout Title="@localizer["Milstensöversikt"]">
    <Actions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => NavigationManager.NavigateTo(Planity.FrontendBlazorWASM.Routes.MilestoneNew))" StartIcon="@Icons.Material.Filled.Add">
            @localizer["Ny milestone"]
        </MudButton>
    </Actions>
    <Filters>

    </Filters>
    <MainContent>
        <EntityTable Items="@Milestones" EditLinkFunction="x => Routes.MilestoneDetails(x.Id)">
            <HeaderContent>
                <MudTh>Namn</MudTh>
                <MudTh>Datum</MudTh>
                <MudTh>Projekt</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.Name</MudTd>
                <MudTd>@context.Start.ToString()</MudTd>
                <MudTd>@GetProjectName(context)</MudTd>
            </RowTemplate>
        </EntityTable>
    </MainContent>
</OverviewPageLayout>


@code {
    private List<Milestone> Milestones = new();
    private Dictionary<string, string> MilestoneProjectMap = new();

    protected override async Task OnInitializedAsync()
    {
        var projects = await ProjectService.GetProjectsAsync();
        Milestones = projects.SelectMany(p => p.Milestones).ToList();
        MilestoneProjectMap = projects
            .SelectMany(p => p.Milestones.Select(m => new { m.Id, ProjectName = p.Name }))
            .ToDictionary(x => x.Id, x => x.ProjectName);
    }

    private string GetProjectName(Milestone milestone)
    {
        return MilestoneProjectMap.TryGetValue(milestone.Id, out var name) ? name : string.Empty;
    }
}
