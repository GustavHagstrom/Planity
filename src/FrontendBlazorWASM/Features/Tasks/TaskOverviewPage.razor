@page "/tasks"
@inject NavigationManager NavigationManager
@inject IProjectService ProjectService
@inject IStringLocalizer<TaskOverviewPage> localizer
@inject IResourceService ResourceService
@inject IDateCalculator GanttDateCalculator

<OverviewPageLayout Title="@localizer["Uppgiftsöversikt"]">
    <LeftActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => NavigationManager.NavigateTo(Planity.FrontendBlazorWASM.Routes.TaskNew))" StartIcon="@Icons.Material.Filled.Add" Size="Size.Small">
            @localizer["Ny uppgift"]
        </MudButton>
    </LeftActions>

    <ChildContent>
        <EntityTable Items="@Tasks" EditLinkFunction="x => Routes.TaskDetails(x.Id)">
            <HeaderContent>
                <MudTh>Namn</MudTh>
                <MudTh>Start</MudTh>
                <MudTh>Slut</MudTh>
                <MudTh>Projekt</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.Name</MudTd>
                <MudTd>@context.Start?.ToShortDateString()</MudTd>
                <MudTd>@GanttDateCalculator.CalculateEnd(context, Resources)?.ToShortDateString()</MudTd>
                <MudTd>@GetProjectName(context)</MudTd>
            </RowTemplate>
        </EntityTable>
    </ChildContent>
</OverviewPageLayout>


@code {
    private List<ProjectTask> Tasks = new();
    private Dictionary<string, string> TaskProjectMap = new();
    private List<Resource> Resources = new();

    protected override async Task OnInitializedAsync()
    {
        var projects = await ProjectService.GetProjectsAsync();
        Resources = await ResourceService.GetOrganizationResources();
        Tasks = await ProjectService.GetAllTasksAsync();
        TaskProjectMap = Tasks.Select(t => new { t.Id, ProjectName = projects.FirstOrDefault(p => p.Tasks.Any(x => x.Id == t.Id))?.Name ?? "" })
            .ToDictionary(x => x.Id, x => x.ProjectName);
    }

    private string GetProjectName(ProjectTask task)
    {
        return TaskProjectMap.TryGetValue(task.Id, out var name) ? name : string.Empty;
    }
}
