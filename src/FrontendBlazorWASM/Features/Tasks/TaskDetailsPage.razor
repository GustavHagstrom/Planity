@page "/tasks/{TaskId}"
@using TaskStatus = Planity.FrontendBlazorWASM.TaskStatus;
@inject IProjectService ProjectService
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject IStringLocalizer<TaskDetailsPage> localizer

<MudPaper Class="pa-4">
    <EntityForm TModel="ProjectTask" Model="task" OnValidSubmit="SaveTask" Title="@localizer["Uppgiftsinformation"]">
        @if (task == null)
        {
            <MudProgressCircular Indeterminate Color="Color.Primary"></MudProgressCircular>
        }
        else
        {
        
            <MudTextField T="string" @bind-Value="task.Name" Label="Namn" For="() => task.Name" Required="true"></MudTextField>
            <MudTextField T="string" @bind-Value="task.Description" Label="Beskrivning" For="() => task.Description"></MudTextField>
            <MudDatePicker @bind-Date="task.Start" Label="Startdatum"></MudDatePicker>
            <MudDatePicker @bind-Date="task.End" Label="Slutdatum"></MudDatePicker>
            <MudSelect T="TaskStatus" Label="Status" @bind-Value="task.Status">
                @foreach (TaskStatus status in System.Enum.GetValues(typeof(TaskStatus)))
                {
                    <MudSelectItem Value="@status">@status</MudSelectItem>
                }
            </MudSelect>
            <MudTextField T="string" @bind-Value="task.AssignedResourceName" Label="Tilldelad resurs" For="() => task.AssignedResourceName"></MudTextField>
        
        }
    </EntityForm>
</MudPaper>

@code {
    [Parameter] public string? TaskId { get; set; }
    private ProjectTask? task;
    private string? projectId;

    protected override async Task OnParametersSetAsync()
    {
        // Find the project and task by searching all projects
        var projects = await ProjectService.GetProjectsAsync();
        var found = projects.SelectMany(p => p.Tasks.Select(t => (Task: t, ProjectId: p.Id)))
                            .FirstOrDefault(x => x.Task.Id == TaskId);
        task = found.Task;
        projectId = found.ProjectId;
    }

    private async Task SaveTask()
    {
        if (task != null && projectId != null)
        {
            await ProjectService.UpdateTaskAsync(projectId, task);
            await JS.InvokeVoidAsync("history.back");
        }
    }

}
