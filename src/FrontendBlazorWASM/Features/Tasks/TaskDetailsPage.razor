@page "/tasks/{TaskId}"
@using Planity.FrontendBlazorWASM.Shared.Models
@using TaskStatus = Planity.FrontendBlazorWASM.TaskStatus;
@inject IProjectService ProjectService
@inject NavigationManager NavigationManager
@using MudBlazor

<MudPaper Class="pa-4">
    <MudText Typo="Typo.h5">Uppgiftsinformation</MudText>
    @if (task == null)
    {
        <MudProgressCircular Indeterminate Color="Color.Primary" />
    }
    else
    {
        <MudTextField Label="Namn" @bind-Value="task.Name" />
        <MudTextField Label="Beskrivning" @bind-Value="task.Description" />
        <MudDatePicker Label="Startdatum" @bind-Date="task.Start" />
        <MudDatePicker Label="Slutdatum" @bind-Date="task.End" />
        <MudSelect T="TaskStatus" Label="Status" @bind-Value="task.Status">
            @foreach (TaskStatus status in System.Enum.GetValues(typeof(TaskStatus)))
            {
                <MudSelectItem Value="@status">@status</MudSelectItem>
            }
        </MudSelect>
        <MudTextField Label="Tilldelad resurs" @bind-Value="task.AssignedResourceName" />
        <MudButton Color="Color.Primary" OnClick="SaveTask">Spara ändringar</MudButton>
    }
    <MudButton Variant="Variant.Text" OnClick="GoBack">Tillbaka till översikt</MudButton>
</MudPaper>

@code {
    [Parameter] public string? TaskId { get; set; }
    private ProjectTask? task;
    private string? projectId;

    protected override async Task OnParametersSetAsync()
    {
        // Find the project and task by searching all projects
        var projects = await ProjectService.GetProjectsAsync();
        var found = projects.SelectMany(p => p.Tasks.Select(t => (Task: t, ProjectId: p.Id)))
                            .FirstOrDefault(x => x.Task.Id == TaskId);
        task = found.Task;
        projectId = found.ProjectId;
    }

    private async Task SaveTask()
    {
        if (task != null && projectId != null)
        {
            await ProjectService.UpdateTaskAsync(projectId, task);
            NavigationManager.NavigateTo(Planity.FrontendBlazorWASM.Routes.TasksOverview);
        }
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo(Planity.FrontendBlazorWASM.Routes.TasksOverview);
    }
}
